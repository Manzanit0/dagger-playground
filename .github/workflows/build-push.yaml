name: Build and Push to AWS ECR

on:
  workflow_call:
    inputs:
      dockerfile:
        description: Dockerfile to build.
        type: string
        required: true
      repository_name:
        description: name of the repository
        type: string
        required: true
      aws_region:
        description: aws region where everything happens.
        type: string
        required: true
      aws_role_to_assume:
        description: role to assume.
        type: string
        required: true
      runs_on:
        description: |
          Machine to run on.
        type: string
        required: false
        default: ubuntu-latest

# This workflow relies on OIDC enabled for AWS
# ref: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
permissions:
  id-token: write
  contents: write
  actions: read

jobs:
  lint:
    name: Build and push
    runs-on: ${{ inputs.runs_on }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: "1.21"

      - name: Install Dagger CLI
        run: cd /usr/local && { curl -L https://dl.dagger.io/dagger/install.sh | sh; cd -; }

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-session-name: gha-release-service-go-workflow
          role-to-assume: ${{ inputs.aws_role_to_assume }}
          aws-region: ${{ inputs.aws_region }}

      - name: Log in to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v2

      # TODO: Need to figure out the best way to pipe a list of build args.
      # Maybe passing a string and breaking that down in the Dagger code is
      # better in terms of UX?
      #
      # TODO 2: I think this won't work if it runs in another repository. We
      # might need to do an explicit checkout of the Go code.
      - name: Run Dagger pipeline
        run: |
          dagger run go run ./cmd/build \
              --local-build \
              --dockerfile ${{ inputs.dockerfile }} \
              --aws-ecr-uri ${{ steps.login_ecr.outputs.registry }} \
              --aws-ecr-repository ${{ inputs.repository_name }}
